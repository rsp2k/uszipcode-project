[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "uszipcode"
dynamic = ["version"]
description = "USA zipcode programmable database, includes 2020 census data and geometry information."
readme = "README.rst"
license = "MIT"
authors = [
    { name = "Sanhe Hu", email = "husanhe@gmail.com" },
]
maintainers = [
    { name = "Sanhe Hu", email = "husanhe@gmail.com" },
]
keywords = ["zipcode", "census", "demographics", "geography", "usa"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.8"
dependencies = [
    "attrs",
    "requests",
    "pathlib_mate",
    "atomicwrites",
    "fuzzywuzzy",
    "haversine>=2.5.0",
    "SQLAlchemy>=2.0.30",
    "sqlalchemy_mate>=2.0.0.1",
]

[project.optional-dependencies]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "boto3",
    "botocore",
]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "boto3",
    "botocore",
    "twine",
    "wheel",
    "python-Levenshtein>=0.25.1",
    "ruff>=0.1.0",
]
docs = [
    # Add documentation dependencies here when needed
]
performance = [
    "python-Levenshtein>=0.25.1",
]

[project.urls]
Homepage = "https://github.com/MacHu-GWU/uszipcode-project"
Documentation = "https://uszipcode.readthedocs.io"
Repository = "https://github.com/MacHu-GWU/uszipcode-project"
Issues = "https://github.com/MacHu-GWU/uszipcode-project/issues"
Changelog = "https://github.com/MacHu-GWU/uszipcode-project/releases"

[tool.hatch.version]
path = "uszipcode/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["uszipcode"]

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "E722",  # bare except, keep legacy behavior for now
    "C408",  # unnecessary dict/list calls, keep legacy style for compatibility
    "UP031", # percent format, keep for Python < 3.6 compatibility
    "B020",  # loop control variable override (known pattern in fuzzy matching)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["uszipcode"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "network: marks tests as requiring network access",
]

[tool.coverage.run]
source = ["uszipcode"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "boto3>=1.37.38",
    "botocore>=1.37.38",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "python-levenshtein>=0.25.1",
    "ruff>=0.13.1",
]
